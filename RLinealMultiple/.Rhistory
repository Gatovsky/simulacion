grid.arrange(plot1, plot2, plot3, plot4)
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
install.packages("gridExtra")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(dplyr)
library(psych)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = 'Life Exp', asesinatos = Murder,
universitarios = 'HS Grad', heladas = Frost, area = Area,
.data = datos)
datos <- mutate(.data = datos, den_pobl = habitantes * 1000 / area)
round(cor(x = datos, method = "pearson"), 3)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
library(GGally)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
modelo <- lm(esp_vida ~ habitantes + ingresos + analfabetismo +
asesinatos + universitarios + heladas + area +
den_pobl, data = datos)
summary(modelo)
# selección de los mejores predictores usando la estrategia de stepwise mixto
step(object = modelo, direction = "both", trace = 1)
modelo <- (lm(formula = esp_vida ~ habitantes + asesinatos + universitarios +
heladas, data = datos))
summary(modelo)
#intervalos de confianza
confint(lm(formula = esp_vida ~ habitantes + asesinatos + universitarios +
heladas, data = datos))
# Relación lineal entre  predictores núméricos y la variable respuesta
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
ggpairs(datos, lower = list(continuous = "smooth", geom_point(color = "orange")),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
ggpairs(datos, lower = list(continuous = "smooth"), geom_point(color = "orange"),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
ggpairs(datos, lower = list(continuous = "smooth"), geom_point(color = "orange"),
diag = list(continuous = "barDiag"), axisLabels = "none")
ggpairs(datos, lower = list(continuous = "smooth", color = "red"),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
qqline(modelo$residuals)
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
# graficación normal de los residuos
qqnorm(modelo$residuals)
qqline(modelo$residuals)
qqnorm(modelo$residuals, pch = "orange")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, col = "orange")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, col = "dodgerblue")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, pch =16, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
# graficación normal de los residuos
qqnorm(modelo$residuals, pch =17, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, pch =19, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
mis_colores <- rainbow(length(x))
qqnorm(modelo$residuals, pch =19, col = mis_colores, main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
mis_colores <- rainbow(length(qqnorm(modelo$residuals)))
qqnorm(modelo$residuals, pch =19, col = mis_colores, main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
qqnorm(modelo$residuals, pch =19, col = my_colors, main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
mis_colores <- rainbow()
qqnorm(modelo$residuals, pch =19, col = mis_colores, main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, pch =19, col = dodgerblue, main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, pch =19, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, pch =19, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red", lwd = 2)
shapiro.test(modelo$residuals)
ggplot(data = datos, aes(modelo$fitted.values, modelo$residuals)) +
geom_point(pch = 19, color = "dodgerblue") +
geom_smooth(color = "firebrick", se = FALSE) +
geom_hline(yintercept = 0) +
theme_bw()
ggplot(data = datos, aes(modelo$fitted.values, modelo$residuals)) +
geom_point(pch = 19, color = "dodgerblue") +
geom_smooth(color = "firebrick", se = FALSE) +
geom_hline(yintercept = 0, col = "orange") +
theme_bw()
library(lmtest)
install.packages("lmtest")
bptest(modelo)
library(lmtest)
bptest(modelo)
library(corrplot)
install.packages("corrplot")
library(corrplot)
corrplot(cor(dplyr::select(datos, habitantes, asesinatos, universitarios, heladas)),
method = "number", tl.col = "black")
corrplot(cor(dplyr::select(datos, habitantes, asesinatos, universitarios, heladas)),
method = "number", tl.col = "orange")
corrplot(cor(dplyr::select(datos, habitantes, asesinatos, universitarios, heladas)),
method = "number", tl.col = "blue")
ggplot(data = datos, aes(modelo$fitted.values, modelo$residuals)) +
geom_point(pch = 19, color = "dodgerblue") +
geom_smooth(color = "firebrick", se = FALSE) +
geom_hline(yintercept = 0, col = "orange") +
theme_bw()
install.packages("car")
library(car)
vif(modelo)
dwt(modelo, alternative = "two.sided")
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual))) +
geom_hline(yintercept = 3, color = "grey", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'red', 'black'))) +
scale_color_identity() +
labs(title = "Distribución de los residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual), color = "orange")) +
geom_hline(yintercept = 3, color = "grey", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'red', 'black'))) +
scale_color_identity() +
labs(title = "Distribución de los residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual), col = "orange")) +
geom_hline(yintercept = 3, color = "grey", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'red', 'black'))) +
scale_color_identity() +
labs(title = "Distribución de los residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual))) +
geom_hline(yintercept = 3, color = "dodgerblue", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'red', 'black'))) +
scale_color_identity() +
labs(title = "Distribución de los residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
#valores atípicos
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual))) +
geom_hline(yintercept = 3, color = "dodgerblue", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'red', 'black'))) +
scale_color_identity() +
labs(title = "Distribución de residuos",
y = "residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
#valores atípicos
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual))) +
geom_hline(yintercept = 3, color = "firebreake", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'orange', 'dodgerblue'))) +
scale_color_identity() +
labs(title = "Distribución de residuos",
y = "residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
#valores atípicos
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual))) +
geom_hline(yintercept = 3, color = "firebrick", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'orange', 'dodgerblue'))) +
scale_color_identity() +
labs(title = "Distribución de residuos",
y = "residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
which(abs(datos$studentized_residual) > 3)
summary(influence.measures(modelo))
influencePlot(modelo)
influencePlot(modelo, aes(color = "firebrick", linetype = "dashed"))
influencePlot(modelo) + aes(color = "firebrick", linetype = "dashed")
influencePlot(modelo) + geom_line(color = "firebrick", linetype = "dashed")
influencePlot(modelo, geom_line(color = "firebrick", linetype = "dashed"))
View(plot4)
View(plot3)
View(plot2)
View(plot1)
View(modelo)
View(datos)
#gráfica de las influiencias
influencePlot(modelo)
datosxy <- read.table("~/simulacion/Log_Exp/discotecas.txt", header = TRUE)
datosxy
modelo <- lm(log(DECIBELES) ~ POTENCIA, data = datosxy)
summary(modelo)
plot(x,y, pch=19, col = "dodgerblue", bg="red", main="Diagrama x, y")
grid(10, 10, lwd=2)
plot(x,log(y), pch=22, bg="orange", main = "log(y), X")
abline(reg=modelo, col="blue", lwd=1)
grid(5,5,lwd=2)
plot(x,y, pch=21, bg="turquoise", main="Aproximación exponencial")
lines(x, exp(modelo$fitted.values), col="firebrick", lwd = 2)
grid(10, 10, lwd=1)
plot(predict(modelo), residuals(modelo), pch=22, bg="dodgerblue", main="Gráfica de Residuos")
grid(10,10, lwd=1.5)
lines(predict(modelo), residuals(modelo), type="h", col="orange", lwd=1)
abline(h=0, col="firebrick", lty=3, lwd=2)
plot(x,y, pch=19, col = "dodgerblue", bg="red", main="Diagrama x, y")
grid(10, 10, lwd=2)
modelo <- lm(log(DECIBELES) ~ POTENCIA, data = datosxy)
summary(modelo)
plot(x,y, pch=19, col = "dodgerblue", bg="red", main="Diagrama x, y")
grid(10, 10, lwd=2)
plot(x,log(y), pch=22, bg="orange", main = "log(y), X")
abline(reg=modelo, col="blue", lwd=1)
grid(5,5,lwd=2)
modelo <- lm(log(DECIBELES) ~ POTENCIA, data = datosxy)
summary(modelo)
datosxy <- read.table("~/simulacion/Log_Exp/discotecas.txt", header = TRUE)
datosxy
modelo <- lm(log(DECIBELES) ~ POTENCIA, data = datosxy)
summary(modelo)
plot(datosxy$DECIBELES, datosxy$POTENCIA, pch=19, col = "dodgerblue", bg="red", main="Diagrama x, y")
grid(10, 10, lwd=2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "dodgerblue", bg="red", main="Diagrama x, y")
grid(10, 10, lwd=2)
plot(datosxy$POTENCIA,log(datosxy$DECIBELES), pch=22, bg="orange", main = "log(y), X")
abline(reg=modelo, col="blue", lwd=1)
grid(5,5,lwd=2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=21, bg="turquoise", main="Aproximación exponencial")
lines(x, exp(modelo$fitted.values), col="firebrick", lwd = 2)
grid(10, 10, lwd=1)
plot(predict(modelo), residuals(modelo), pch=22, bg="dodgerblue", main="Gráfica de Residuos")
grid(10,10, lwd=1.5)
lines(predict(modelo), residuals(modelo), type="h", col="orange", lwd=1)
abline(h=0, col="firebrick", lty=3, lwd=2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=21, bg="turquoise", main="Aproximación exponencial")
lines(x, exp(modelo$fitted.values), col="firebrick", lwd = 2)
grid(10, 10, lwd=1)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=21, bg="turquoise", main="Aproximación exponencial")
lines(datosxy$POTENCIA, exp(modelo$fitted.values), col="firebrick", lwd = 2)
grid(10, 10, lwd=1)
plot(predict(modelo), residuals(modelo), pch=22, bg="dodgerblue", main="Gráfica de Residuos")
grid(10,10, lwd=1.5)
lines(predict(modelo), residuals(modelo), type="h", col="orange", lwd=1)
abline(h=0, col="firebrick", lty=3, lwd=2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=21, bg="turquoise", main="Aproximación exponencial")
lines(datosxy$POTENCIA, exp(modelo$fitted.values), col="firebrick", lwd = 2)
grid(10, 10, lwd=1)
plot(predict(modelo), residuals(modelo), pch=22, bg="dodgerblue", main="Gráfica de Residuos")
grid(10,10, lwd=1.5)
lines(predict(modelo), residuals(modelo), type="h", col="orange", lwd=1)
abline(h=0, col="firebrick", lty=3, lwd=2)
predict(modelo)
datosxy <- read.table("~/simulacion/Log_Exp/discotecas.txt", header = TRUE)
datosxy
# LOGARÍTMICA #
modeloL <- lm(DECIBELES - log(POTENCIA), data = datosxy)
summary(modeloL)
modeloL <- lm(DECIBELES - log(POTENCIA), data = datosxy)
modeloL <- lm(DECIBELES ~ log(POTENCIA), data = datosxy)
summary(modeloL)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "dodgerblue", bg="red", main="Diagrama x, y")
grid(10, 10, lwd=2)
plot(datosxy$POTENCIA,log(datosxy$DECIBELES), pch=22, bg="orange", main = "log(y), X")
abline(reg=modeloE, col="blue", lwd=1)
grid(5,5,lwd=2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=21, bg="turquoise", main="Aproximación exponencial")
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="firebrick", lwd = 2)
grid(10, 10, lwd=1)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "dodgerblue", bg="red", main="Diagrama x, y")
grid(10, 10, lwd=2)
plot(datosxy$POTENCIA,log(datosxy$DECIBELES), pch=22, bg="orange", main = "log(y), X")
abline(reg=modeloL, col="blue", lwd=1)
grid(5,5,lwd=2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=21, bg="turquoise", main="Aproximación exponencial")
lines(datosxy$POTENCIA, exp(modeloL$fitted.values), col="firebrick", lwd = 2)
grid(10, 10, lwd=1)
modeloL <- lm(DECIBELES ~ log(POTENCIA), data = datosxy)
summary(modeloL)
modeloL <- lm(DECIBELES ~ log(POTENCIA), data = datosxy)
summary(modeloL)
plot(datosxy$POTENCIA, datosxy$DECIBELES ,pch=19, col = "orange", main="Diagrama de dispersión X,Y")
grid(10,10,lwd=1)
plot(log(datosxy$POTENCIA), datosxy$DECIBELES, pch=19, col = "orange", bg="red", main="Diagrama Y, ln(X)", xlab = "ln(x)", ylab = "Y")
abline(reg=modeloL, col="dodgerblue", lwd=2)
grid(10,10,lwd=1)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "orange", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="firebrick", lwd = 2)
grid(10,10,lwd=1)
predict(modeloL)
# EXPONENCIAL #
modeloE <- lm(log(DECIBELES) ~ POTENCIA, data = datosxy)
summary(modeloE)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "dodgerblue", bg="red", main="Diagrama x, y")
grid(10, 10, lwd=2)
plot(datosxy$POTENCIA,log(datosxy$DECIBELES), pch=22, bg="orange", main = "log(y), X")
abline(reg=modeloE, col="blue", lwd=1)
grid(5,5,lwd=2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=21, bg="turquoise", main="Aproximación exponencial")
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="firebrick", lwd = 2)
grid(10, 10, lwd=1)
plot(predict(modeloE), residuals(modeloE), pch=22, bg="dodgerblue", main="Gráfica de Residuos")
grid(10,10, lwd=1.5)
lines(predict(modeloE), residuals(modeloE), type="h", col="orange", lwd=1)
abline(h=0, col="firebrick", lty=3, lwd=2)
---------------------------------------------------------------------------------
# LOGARÍTMICA #
modeloL <- lm(DECIBELES ~ log(POTENCIA), data = datosxy)
summary(modeloL)
plot(datosxy$POTENCIA, datosxy$DECIBELES ,pch=19, col = "orange", main="Diagrama de dispersión X,Y")
grid(10,10,lwd=1)
plot(log(datosxy$POTENCIA), datosxy$DECIBELES, pch=19, col = "orange", bg="red", main="Diagrama Y, ln(X)", xlab = "ln(x)", ylab = "Y")
abline(reg=modeloL, col="dodgerblue", lwd=2)
grid(10,10,lwd=1)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "orange", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="firebrick", lwd = 2)
grid(10,10,lwd=1)
predict(modeloL)
# comparación visual
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "orange", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="firebrick", lwd = 2)
lines(predict(modeloE), residuals(modeloE), type="h", col="orange", lwd=1)
grid(10,10,lwd=1)
# y = ax^b
library(ggplot2)
datosxy <- read.table("~/simulacion/Log_Exp/discotecas.txt", header = TRUE)
datosxy
# x <- c(1, 2, 3, 4 , 5, 6)
# y <- c(10, 40, 120, 300, 800, 500)
# datos <- data.frame(x, y)
# modelo <- lm(log(y) ~ x, data = datos)
# EXPONENCIAL #
modeloE <- lm(log(DECIBELES) ~ POTENCIA, data = datosxy)
summary(modeloE)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "dodgerblue", bg="red", main="Diagrama x, y")
grid(10, 10, lwd=2)
plot(datosxy$POTENCIA,log(datosxy$DECIBELES), pch=22, bg="orange", main = "log(y), X")
abline(reg=modeloE, col="blue", lwd=1)
grid(5,5,lwd=2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=21, bg="turquoise", main="Aproximación exponencial")
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="firebrick", lwd = 2)
grid(10, 10, lwd=1)
plot(predict(modeloE), residuals(modeloE), pch=22, bg="dodgerblue", main="Gráfica de Residuos")
grid(10,10, lwd=1.5)
lines(predict(modeloE), residuals(modeloE), type="h", col="orange", lwd=1)
abline(h=0, col="firebrick", lty=3, lwd=2)
---------------------------------------------------------------------------------
# LOGARÍTMICA #
modeloL <- lm(DECIBELES ~ log(POTENCIA), data = datosxy)
summary(modeloL)
plot(datosxy$POTENCIA, datosxy$DECIBELES ,pch=19, col = "orange", main="Diagrama de dispersión X,Y")
grid(10,10,lwd=1)
plot(log(datosxy$POTENCIA), datosxy$DECIBELES, pch=19, col = "orange", bg="red", main="Diagrama Y, ln(X)", xlab = "ln(x)", ylab = "Y")
abline(reg=modeloL, col="dodgerblue", lwd=2)
grid(10,10,lwd=1)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "orange", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="firebrick", lwd = 2)
grid(10,10,lwd=1)
predict(modeloL)
# comparación visual
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "orange", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="firebrick", lwd = 2)
lines(predict(modeloE), residuals(modeloE), type="h", col="orange", lwd=1)
grid(10,10,lwd=1)
lines(predict(modeloE), residuals(modeloE), type="h", col="orange", lwd=2)
lines(datosxy$POTENCIA, modeloL$fitted.values, col="firebrick", lwd = 2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "orange", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="firebrick", lwd = 2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "orange", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "green", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=24, col = "green", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=22, col = "green", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=20, col = "green", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "green", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "green", bg="turquoise", main="Y = B1 + B2lnX")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2, lty=2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2, lty=2)
grid(10,10,lwd=1)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "green", bg="turquoise", main="COMPARACIÓN DE MODELOS")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2, lty=2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2, lty=2)
grid(10,10,lwd=1)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "green", bg="turquoise") + title(main="COMPARACIÓN DE MODELOS")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2, lty=2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2, lty=2)
grid(10,10,lwd=1)
install.packages("extrafont")
library(extrafont)
font_import()
warnings()
loadfonts(device = "win", quiet = TRUE
loadfonts(device = "win", quiet = TRUE)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "green", bg="turquoise") + title(main="COMPARACIÓN DE MODELOS", family("Cascadia Code PL"))
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2, lty=2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2, lty=2)
grid(10,10,lwd=1)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "green", bg="turquoise") + title(main="COMPARACIÓN DE MODELOS", family = "Cascadia Code PL")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2, lty=2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2, lty=2)
grid(10,10,lwd=1)
plot(datosxy$POTENCIA, datosxy$DECIBELES, pch=19, col = "green", bg="turquoise") + title(main="COMPARACIÓN DE MODELOS", family = "Consolas")
lines(datosxy$POTENCIA, modeloL$fitted.values, col="dodgerblue", lwd = 2, lty=2)
lines(datosxy$POTENCIA, exp(modeloE$fitted.values), col="orange", lwd = 2, lty=2)
grid(10,10,lwd=1)
head(fonts())
loadfonts(device = "Linux", quiet = TRUE)
loadfonts(device = "unix", quiet = TRUE)
head(fonts())
fonts()
font_import(paths = "/usr/share/fonts/cascadia_ttf")
fonts()
font_import(paths = "/home/gatovsky/Downloads/sf-pro/")
font_import(paths = "/home/gatovsky/Downloads/sf-pro/")
fonts()
font_import(path = "/home/gatovsky/Downloads/sf-pro/")
fonts()
font_import(paths = "/home/gatovsky/Downloads/sf-pro/")
