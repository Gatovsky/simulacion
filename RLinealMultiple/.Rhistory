library(dplyr)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = 'Life Exp', asesinatos = Murder,
universitarios = 'HS Grad', heladas = Frost, area = Area,
.data = datos)
datos <- mutate(.data = datos, densidad_poblacion = habitantes * 1000 / area)
round(cor(x = datos, method = "pearson"), 3)
View(datos)
library(dplyr)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = 'Life Exp', asesinatos = Murder,
universitarios = 'HS Grad', heladas = Frost, area = Area,
.data = datos)
datos <- mutate(.data = datos, den_pobl = habitantes * 1000 / area)
round(cor(x = datos, method = "pearson"), 3)
library(sych
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "a")
library(dplyr)
library(sych)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = 'Life Exp', asesinatos = Murder,
universitarios = 'HS Grad', heladas = Frost, area = Area,
.data = datos)
datos <- mutate(.data = datos, den_pobl = habitantes * 1000 / area)
round(cor(x = datos, method = "pearson"), 3)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "a")
library(dplyr)
library(sych)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = 'Life Exp', asesinatos = Murder,
universitarios = 'HS Grad', heladas = Frost, area = Area,
.data = datos)
datos <- mutate(.data = datos, den_pobl = habitantes * 1000 / area)
round(cor(x = datos, method = "pearson"), 3)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "a")
library(psych)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
multi.hist(sat.act)
multi.hist(sat.act,bcol="red")
multi.hist(sat.act,dcol="blue")  #make both lines blue
multi.hist(sat.act,dcol= c("blue","red"),dlty=c("dotted", "solid"))
multi.hist(sat.act,freq=TRUE)   #show the frequency plot
multi.hist(sat.act,nrow=2)
histBy(sat.act,"SATQ","gender") #input by variable names
histBy(SATQ~ gender, data=sat.act) #formula input
library(psych)
library(psych)
install.packages("psych")
library(psych)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "a")
library(dplyr)
library(psych)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = 'Life Exp', asesinatos = Murder,
universitarios = 'HS Grad', heladas = Frost, area = Area,
.data = datos)
datos <- mutate(.data = datos, den_pobl = habitantes * 1000 / area)
round(cor(x = datos, method = "pearson"), 3)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = 'Life Exp', asesinatos = Murder,
universitarios = 'HS Grad', heladas = Frost, area = Area,
.data = datos)
datos <- mutate(.data = datos, den_pobl = habitantes * 1000 / area)
round(cor(x = datos, method = "pearson"), 3)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
library(GGally)
install.packages("GGally")
library(GGally)
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"), axisLabels = "none")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = Species, alpha = 0.5),
diag = list(continuous = "barDiag"), axisLabels = "none")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = datos, alpha = 0.5),
diag = list(continuous = "barDiag"), axisLabels = "none")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = habitantes, alpha = 0.5),
diag = list(continuous = "barDiag"), axisLabels = "none")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = "blue", alpha = 0.5),
diag = list(continuous = "barDiag"), axisLabels = "none")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = "gree", alpha = 0.5),
diag = list(continuous = "barDiag"), axisLabels = "none")
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = Species, alpha = 0.5),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color =, alpha = 0.5),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = Corr)
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = Corr),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
library(GGally)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = data),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = heladas),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = Population),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = x),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"), aes(color = cor),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
modelo <- lm(esp_vida ~ habitantes + ingresos + analfabetismo +
asesinatos + universitarios + heladas + area +
den_pobl, data = datos)
summary(modelo)
step(object = modelo, direction = "both", trace = 1)
modelo <- lm(esp_vida ~ habitantes + ingresos + analfabetismo +
asesinatos + universitarios + heladas + area +
den_pobl, data = datos)
library(dplyr)
library(psych)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = 'Life Exp', asesinatos = Murder,
universitarios = 'HS Grad', heladas = Frost, area = Area,
.data = datos)
datos <- mutate(.data = datos, den_pobl = habitantes * 1000 / area)
round(cor(x = datos, method = "pearson"), 3)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
library(GGally)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
modelo <- lm(esp_vida ~ habitantes + ingresos + analfabetismo +
asesinatos + universitarios + heladas + area +
den_pobl, data = datos)
summary(modelo)
step(object = modelo, direction = "both", trace = 1)
modelo <- (lm(formula = esp_vida ~ habitantes + asesinatos + universitarios +
heladas, data = datos))
summary(modelo)
confint(lm(formula = esp_vida ~ habitantes + asesinatos + universitarios +
heladas, data = datos))
confint(lm(formula = esp_vida ~ habitantes + asesinatos + universitarios +
heladas, data = datos))
# Relación lineal entre  predictores núméricos y la variable respuesta
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
install.packages("gridExtra")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(dplyr)
library(psych)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = 'Life Exp', asesinatos = Murder,
universitarios = 'HS Grad', heladas = Frost, area = Area,
.data = datos)
datos <- mutate(.data = datos, den_pobl = habitantes * 1000 / area)
round(cor(x = datos, method = "pearson"), 3)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
library(GGally)
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
modelo <- lm(esp_vida ~ habitantes + ingresos + analfabetismo +
asesinatos + universitarios + heladas + area +
den_pobl, data = datos)
summary(modelo)
# selección de los mejores predictores usando la estrategia de stepwise mixto
step(object = modelo, direction = "both", trace = 1)
modelo <- (lm(formula = esp_vida ~ habitantes + asesinatos + universitarios +
heladas, data = datos))
summary(modelo)
#intervalos de confianza
confint(lm(formula = esp_vida ~ habitantes + asesinatos + universitarios +
heladas, data = datos))
# Relación lineal entre  predictores núméricos y la variable respuesta
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
ggpairs(datos, lower = list(continuous = "smooth", geom_point(color = "orange")),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
ggpairs(datos, lower = list(continuous = "smooth"), geom_point(color = "orange"),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
ggpairs(datos, lower = list(continuous = "smooth"), geom_point(color = "orange"),
diag = list(continuous = "barDiag"), axisLabels = "none")
ggpairs(datos, lower = list(continuous = "smooth", color = "red"),
diag = list(continuous = "barDiag"), axisLabels = "none") + scale_fill_manual(values = my_colors)
qqline(modelo$residuals)
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point(color = "orange") + geom_smooth(color = "firebrick", fill = "dodgerblue") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
# graficación normal de los residuos
qqnorm(modelo$residuals)
qqline(modelo$residuals)
qqnorm(modelo$residuals, pch = "orange")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, col = "orange")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, col = "dodgerblue")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, pch =16, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
# graficación normal de los residuos
qqnorm(modelo$residuals, pch =17, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, pch =19, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
mis_colores <- rainbow(length(x))
qqnorm(modelo$residuals, pch =19, col = mis_colores, main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
mis_colores <- rainbow(length(qqnorm(modelo$residuals)))
qqnorm(modelo$residuals, pch =19, col = mis_colores, main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
my_colors <- c("setosa" = "blue", "versicolor" = "green", "virginica" = "red")
qqnorm(modelo$residuals, pch =19, col = my_colors, main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
mis_colores <- rainbow()
qqnorm(modelo$residuals, pch =19, col = mis_colores, main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, pch =19, col = dodgerblue, main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, pch =19, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red")
qqnorm(modelo$residuals, pch =19, col = "dodgerblue", main = "Distribución Normal")
qqline(modelo$residuals, col = "red", lwd = 2)
shapiro.test(modelo$residuals)
ggplot(data = datos, aes(modelo$fitted.values, modelo$residuals)) +
geom_point(pch = 19, color = "dodgerblue") +
geom_smooth(color = "firebrick", se = FALSE) +
geom_hline(yintercept = 0) +
theme_bw()
ggplot(data = datos, aes(modelo$fitted.values, modelo$residuals)) +
geom_point(pch = 19, color = "dodgerblue") +
geom_smooth(color = "firebrick", se = FALSE) +
geom_hline(yintercept = 0, col = "orange") +
theme_bw()
library(lmtest)
install.packages("lmtest")
bptest(modelo)
library(lmtest)
bptest(modelo)
library(corrplot)
install.packages("corrplot")
library(corrplot)
corrplot(cor(dplyr::select(datos, habitantes, asesinatos, universitarios, heladas)),
method = "number", tl.col = "black")
corrplot(cor(dplyr::select(datos, habitantes, asesinatos, universitarios, heladas)),
method = "number", tl.col = "orange")
corrplot(cor(dplyr::select(datos, habitantes, asesinatos, universitarios, heladas)),
method = "number", tl.col = "blue")
ggplot(data = datos, aes(modelo$fitted.values, modelo$residuals)) +
geom_point(pch = 19, color = "dodgerblue") +
geom_smooth(color = "firebrick", se = FALSE) +
geom_hline(yintercept = 0, col = "orange") +
theme_bw()
install.packages("car")
library(car)
vif(modelo)
dwt(modelo, alternative = "two.sided")
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual))) +
geom_hline(yintercept = 3, color = "grey", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'red', 'black'))) +
scale_color_identity() +
labs(title = "Distribución de los residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual), color = "orange")) +
geom_hline(yintercept = 3, color = "grey", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'red', 'black'))) +
scale_color_identity() +
labs(title = "Distribución de los residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual), col = "orange")) +
geom_hline(yintercept = 3, color = "grey", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'red', 'black'))) +
scale_color_identity() +
labs(title = "Distribución de los residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual))) +
geom_hline(yintercept = 3, color = "dodgerblue", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'red', 'black'))) +
scale_color_identity() +
labs(title = "Distribución de los residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
#valores atípicos
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual))) +
geom_hline(yintercept = 3, color = "dodgerblue", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'red', 'black'))) +
scale_color_identity() +
labs(title = "Distribución de residuos",
y = "residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
#valores atípicos
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual))) +
geom_hline(yintercept = 3, color = "firebreake", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'orange', 'dodgerblue'))) +
scale_color_identity() +
labs(title = "Distribución de residuos",
y = "residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
#valores atípicos
datos$studentized_residual <- rstudent(modelo)
ggplot(data = datos, aes(x = predict(modelo), y = abs(studentized_residual))) +
geom_hline(yintercept = 3, color = "firebrick", linetype = "dashed") +
# se identifican en rojo observaciones con residuos estandarizados absolutos > 3
geom_point(aes(color = ifelse(abs(studentized_residual) > 3, 'orange', 'dodgerblue'))) +
scale_color_identity() +
labs(title = "Distribución de residuos",
y = "residuos studentized",
x = "predicción modelo") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
which(abs(datos$studentized_residual) > 3)
summary(influence.measures(modelo))
influencePlot(modelo)
influencePlot(modelo, aes(color = "firebrick", linetype = "dashed"))
influencePlot(modelo) + aes(color = "firebrick", linetype = "dashed")
influencePlot(modelo) + geom_line(color = "firebrick", linetype = "dashed")
influencePlot(modelo, geom_line(color = "firebrick", linetype = "dashed"))
View(plot4)
View(plot3)
View(plot2)
View(plot1)
View(modelo)
View(datos)
#gráfica de las influiencias
influencePlot(modelo)
